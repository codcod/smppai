[project]
name = "smppai"
version = "0.2.0"
description = "Async SMPP (Short Message Peer-to-Peer) Protocol v3.4 Implementation"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Typing :: Typed",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Operating System :: OS Independent",
]
keywords = [
    "async",
    "asyncio",
    "library",
    "smpp",
    "smppv3.4",
]
dependencies = ["typing-extensions>=4.0.0"]

[dependency-groups]
dev = [
  "bandit>=1.8.5",
  "black>=25.1.0",
  "build>=1.2.2.post1",
  "mypy-extensions>=1.1.0",
  "mypy>=1.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-coverage>=0.0",
  "pytest>=7.0.0",
  "python-semantic-release>=9.0.0",
  "ruff>=0.12.0",
  "twine>=6.1.0",
]

[tool.pyright]
pythonVersion = "3.13"
venv = ".venv"
venvPath = "."
typeCheckingMode = "basic" # Options: "off", "basic", "strict"

include = ["src", "tests"]

exclude = ["**/node_modules", "**/__pycache__", "**/*.pyc"]

reportMissingImports = true # Report missing imports
reportUnusedImports = true  # Report unused imports
reportUnusedFunction = true # Report unused functions

[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'
exclude = '''(
    /(
        .git
        | .mypy_cache
        | .pytest_cache
        | build
        | dist
    )/
)'''
skip-string-normalization = true
fast = false

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py313"
exclude = ["docs/**/*.py"]

[tool.ruff.format]
indent-style = "space"
line-ending = "auto"
quote-style = "single"
skip-magic-trailing-comma = false

[tool.ruff.lint]
# select = ["E4", "E7", "E9", "F", "W", "E", "B", "I", "PL", "C90"]
select = ["E4", "E7", "E9", "F"]
ignore = []

fixable = ["ALL"]
unfixable = ["B"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = [
  "Depends",
  "fastapi.Depends",
  "fastapi.params.Depends",
]

[tool.pytest.ini_options]
# https://docs.pytest.org/en/latest/reference/customize.html
minversion = "6.0"
addopts = [
  "--doctest-modules",
  "-vv",
  "--cov=smpp",
  "--capture=no",
  "--log-cli-level=INFO",
  "--import-mode=importlib",
]
testpaths = ["tests/unit"]
pythonpath = ["src"]
log_format = "%(asctime)s [%(levelname)-8s] [%(filename)s:%(lineno)s] %(message)s"
log_date_format = "%H:%M:%S"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::RuntimeWarning:unittest.mock",
  "ignore:.*coroutine.*was never awaited.*:RuntimeWarning",
]

# Reminder:
# '^file1\.py$',   # TOML literal string (single-quotes, no escaping necessary)
# "^file2\\.py$",  # TOML basic string (double-quotes, backslash and other characters need escaping

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", ".venv"]
skips = ["B101", "B301", "B601"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
exclude = [
  '^file1\.py$',  # TOML literal string (single-quotes, no escaping necessary)
  "^file2\\.py$", # TOML basic string (double-quotes, backslash and other characters need escaping)
]

[[tool.mypy.overrides]]
module = ["smpp.client.*", "smpp.server.*"]
ignore_missing_imports = true

#
# Semantic Release Configuration
#

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
version_toml = ["pyproject.toml:project.version"]
tag_format = "v{version}"
version_source = "tag_only"

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "style",
  "refactor",
  "test",
]
allowed_tags = [
  "feat",
  "fix",
  "perf",
  "build",
  "chore",
  "ci",
  "docs",
  "style",
  "refactor",
  "test",
]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false
token = { env = "GH_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
